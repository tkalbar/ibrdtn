#!/bin/sh
### BEGIN INIT INFO
# Provides:          ibrdtnd
# Required-Start:    $remote_fs $network $local_fs
# Required-Stop:     $remote_fs $network $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: IBR-DTN Daemon
# Description:       IBR-DTN daemon bundle protocol stack for delay tolerant networks.
### END INIT INFO

# Author: Johannes Morgenroth <morgenroth@ibr.cs.tu-bs.de>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=ibrdtnd             		# Introduce a short description here
NAME=ibrdtnd             		# Introduce the short server's name here
PNAME=dtnd               		# Introduce the process name
DAEMON=/usr/sbin/dtnd    		# Introduce the server's location here
PIDFILE=/var/run/ibrdtn/$PNAME.pid	# Path where the pid file is stored
SCRIPTNAME=/etc/init.d/$NAME		# Name of this script
DAEMON_ARGS="-D -p ${PIDFILE}"	 	# Arguments to run the daemon with

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Exit if explicitly told to
[ "$ENABLED" != "0" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# set quiet option if requested
[ -n "${DAEMON_OPTS}" ] && DAEMON_ARGS="${DAEMON_ARGS} ${DAEMON_OPTS}"

# set user if specified in defaults
[ -n "${DAEMON_USER}" ] && DAEMON_USER_START_ARGS="--chuid ${DAEMON_USER}"
[ -n "${DAEMON_USER}" ] && DAEMON_USER_STOP_ARGS="--user ${DAEMON_USER}"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# create the PID directory
	PIDDIR=`dirname ${PIDFILE}`
	if [ ! -d ${PIDDIR} ]; then
		mkdir -p ${PIDDIR}
		chown ${DAEMON_USER} ${PIDDIR}
		# TODO: set the right group
		#chgrp ${DAEMON_USER} ${PIDDIR}
	fi

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet ${DAEMON_USER_START_ARGS} --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet ${DAEMON_USER_START_ARGS} --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $PNAME ${DAEMON_USER_STOP_ARGS}
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON ${DAEMON_USER_STOP_ARGS}
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $PNAME ${DAEMON_USER_STOP_ARGS}
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
	do_start
	RETVAL=$?
	if [ "$VERBOSE" != no ]; then
		case "$RETVAL" in
			0|1) log_end_msg 0 ;;
			2) log_end_msg 1 ;;
		esac
	fi
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	RETVAL=$?
	if [ "$VERBOSE" != no ]; then
		case "$RETVAL" in
			0|1) log_end_msg 0 ;;
			2) log_end_msg 1 ;;
		esac
	fi
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
	exit 3
	;;
esac
